d = data[,c(17, 6, 7, 3)]
d[d==0] = NA
d = na.omit(d)
View(d)
plot(tn = d$1, dino = d$1)
plot(x = d$2, y = d$1)
plot(x = d$2,y = d$1)
plot(2 = d$2,1 = d$1)
plot(d$2, d$1)
plot(d$TN, d$DINO)
plot(x = d$TN, y = d$DINO)
plot(x = d$TP, y = d$DINO)
plot(x = d$TN, y = d$DINO)
plot(x = d$TP, y = d$DINO)
plot(x = d$TEMP, y = d$DINO)
plot(x = d$TN, y = d$DINO)
plot(x = d$TP, y = d$DINO)
plot(x = d$TEMP, y = d$DINO)
hist(d$TN)
hist(d$TN, d$DINO)
hist(d$TN)
boxplot(d$TN)
ggnorm(d$TN)
aanorm(d$TN)
plot(x = d$TP, y = d$DINO)
aanorm(d$TN)
aaline(d$TN)
hist(d$TN)
hist(d$TP)
hist(d$TP, breaks = 50)
hist(d$TN, breaks = 50)
hist(d$TEMP, breaks = 50)
d$temp
d$TEMP
#TP x DINO
plot(x = d$TP, y = d$DINO)
# TN x DINO
plot(x = d$TN, y = d$DINO)
hist(d$TN, breaks = 50)
hist(d$TP, breaks = 50)
hist(d$DINO, breaks = 50)
d$TN_log = log10(d$TN)
hist(d$TN_log)
#TP x DINO
plot(x = d$TP, y = d$DINO)
hist(d$TP, breaks = 50)
d$TP_log = log10(d$TP)
hist(d$TP_log)
d$TEMP_log = log10(d$TEMP)
hist(d$TEMP_log)
hist(d$TEMP, breaks = 50)
d$DINO_log = log10(d$DINO)
hist(d$DINO_log)
hist(d$TN, breaks = 50)
d$TN_log = log10(d$TN)
hist(d$TN_log)
hist(d$TP, breaks = 50)
hist(d$TP_log)
#DINO
hist(d$DINO, breaks = 50)
hist(d$DINO_log)
hist(d$TEMP, breaks = 50)
hist(d$TP_log)
hist(d$TN_log)
hist(d$TP, breaks = 50)
hist(d$TEMP, breaks = 50)
hist(d$TEMP, breaks = 20)
hist(d$TEMP, breaks = 10)
hist(d$TEMP, breaks = 50)
hist(d$DINO_log, breaks = 50)
hist(d$TP_log, breaks = 50)
hist(d$TP_log)
hist(d$TP_log, breaks = 50)
hist(d$TN_log, breaks = 50)
hist(d$TP_log, breaks = 50)
hist(d$TEMP, breaks = 50)
hist(d$DINO_log, breaks = 50)
hist(d$TN_log, breaks = 50)
hist(d$TN_log)
hist(d$TP_log, breaks = 50)
hist(d$TP_log)
hist(d$DINO_log, breaks = 50)
hist(d$DINO_log)
hist(d$TEMP, breaks = 50)
hist(d$TP_log)
d$TP_ln = ln(d$TP)
d$TP_ln = elog(d$TP)
d$TP_ln = ln(d$TP)
hist(d$TP_)
d$TP_ln = ln(d$TP)
d$TP_ln = LN(d$TP)
d$TP_ln = Ln(d$TP)
hist(d$TN_log)
hist(d$TP_log)
hist(d$DINO_log)
hist(d$TEMP, breaks = 50)
hist(d$TN_log)
d$TN_exp = exp(d$TN)
hist(d$TN_exp)
hist(d$TN_exp, breaks = 50)
d$TN_kwad = d$TN^2
hist(d$TN_kwad)
hist(d$DINO_log)
hist(d$TEMP, breaks = 50)
hist(d$TN_kwad)
hist(d$TP_log)
d$TP_exp = exp(d$TP)
hist(d$TP_exp)
d$TP_kwad = d$TP^2
hist(d$TP_kwad)
hist(d$DINO_log)
d$TEMP_log = log10(d$TEMP)
hist(d$TEMP_log)
hist(d$TEMP, breaks = 50)
hist(d$TEMP_log)
hist(d$TEMP, breaks = 50)
d$TEMP_kwad = d$TEMP^2
hist(d$TEMP_kwad)
hist(d$TEMP_log)
hist(d$TEMP_kwad)
hist(d$TEMP_log)
hist(d$TEMP_kwad)
hist(d$DINO_log)
hist(d$TN_log)
hist(d$DINO_log)
library(car)
scatterplot(d$TN_log, d$DINO_log)
plot(d$TN_log, d$DINO_log)
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log)
plot(d$TN_log, d$DINO)
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log)
plot(d$TN_log, d$DINO)
plot(d$TN, d$DINO)
plot(d$TN_log, d$DINO)
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log)
#TP
plot(d$TP_log, d$DINO_log) # = beste
plot(d$TP_log, d$DINO)
plot(d$TP, d$DINO)
plot(d$TP_log, d$DINO)
#TP
plot(d$TP_log, d$DINO_log) # = beste
#TEMP
plot(d$TEMP_log, d$DINO_log) # = beste
#TEMP
plot(d$TEMP_log, d$DINO_log) # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log) # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log) # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log) # = beste
plot(d$TEMP_log, d$DINO)
plot(d$TEMP, d$DINO)
plot(d$TEMP_log, d$DINO)
plot(d$TEMP_kwad, d$DINO)
plot(d$TEMP, d$DINO)
plot(d$TEMP_kwad, d$DINO)
#TEMP
plot(d$TEMP_kwad, d$DINO_log) # = beste
#TEMP
plot(d$TEMP_log, d$DINO_log) # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log) # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log) # = beste
plot(d$TEMP_kwad, d$DINO)
#TEMP
plot(d$TEMP_log, d$DINO_log) # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log) # = beste
hist(d$TP_kwad) # = niks
hist(d$TEMP_kwad) # = beste
hist(d$TEMP_log)
hist(d$TEMP_kwad) # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log) # = beste
#TEMP
plot(x = d$TEMP_kwad, y = d$DINO_log) # = beste
#TEMP
plot(x = d$TEMP_kwad, y = d$DINO_log) # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log) # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log) # = beste
#TP
plot(d$TP_log, d$DINO_log) # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log) # = beste
#TEMP
plot(d$TEMP_log, d$DINO_log) # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log) # = beste
hist(d$TEMP_log)
hist(d$TEMP_kwad) # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log) # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = Logaritmische transformatie van Temperatuur) # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Logaritmische transformatie van Temperatuur") # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Logaritmische transformatie van totaal stikstof") # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Logaritmische transformatie van totaal stikstof", ylab = "Logaritmische transformatie van totaal biovolume dinoflagellaten") # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Logaritmische transformatie van totaal stikstof", ylab = "Logaritmische transformatie vanbiovolume dinoflagellaten") # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Logaritmische transformatie van totaal stikstof", ylab = "Logaritmische transformatie van biovolume dinoflagellaten") # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Logaritmische transformatie van totaal stikstof", ylab = "Log transformatie van biovolume dinoflagellaten") # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Logaritmische transformatie van totaal stikstof", ylab = "Log(10) transformatie van biovolume dinoflagellaten") # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Logaritmische transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten") # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten") # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "BLUE") # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED") # = beste
#TP
plot(d$TP_log, d$DINO_log, xlab = "Log10 transformatie van totaal fosfaat", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED") # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log, xlab = "Kwadratische transformatie van Temperatuur", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED") # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED") # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED") # = beste
#TP
plot(d$TP_log, d$DINO_log, xlab = "Log10 transformatie van totaal fosfaat", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED") # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log, xlab = "Kwadratische transformatie van Temperatuur", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED") # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$TN_log ~ d$DINO_log))) # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$TN_log ~ d$DINO_log))) # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$TN_log ~ d$DINO_log))) # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$TN_log ~ d$DINO_log))) # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$DINO_logn ~ d$TN_log))) # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$DINO_logn ~ d$TN_log))) # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$DINO_lognm  d$TN_log))) # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$DINO_lognm, d$TN_log))) # = beste
# PLOTS TESTEN
#TN
plot(d$TN_log, d$DINO_log, xlab = "Log10 transformatie van totaal stikstof", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$DINO_log ~ d$TN_log))) # = beste
#TP
plot(d$TP_log, d$DINO_log, xlab = "Log10 transformatie van totaal fosfaat", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$DINO_log ~ d$TP_log))) # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log, xlab = "Kwadratische transformatie van Temperatuur", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED") # = beste
#TP
plot(d$TP_log, d$DINO_log, xlab = "Log10 transformatie van totaal fosfaat", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$DINO_log ~ d$TP_log))) # = beste
#TEMP
plot(d$TEMP_kwad, d$DINO_log, xlab = "Kwadratische transformatie van Temperatuur", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$DINO_log ~ d$TEMP_kwad))) # = beste
m1 = lm(d$DINO_log ~ d$TEMP_kwad, data = d)
m1
#TP
plot(d$TP_log, d$DINO_log, xlab = "Log10 transformatie van totaal fosfaat", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$DINO_log ~ d$TP_log))) # = beste
m1 = lm(d$DINO_log ~ d$TEMP_kwad, data = d)
m1
summary(m1)
#TEMP
plot(d$TEMP_kwad, d$DINO_log, xlab = "Kwadratische transformatie van Temperatuur", ylab = "Log10 transformatie van biovolume dinoflagellaten", col = "RED", abline(lm(d$DINO_log ~ d$TEMP_kwad))) # = beste
m1 = lm(d$DINO_log ~ d$TN_log, data = d)
summary(m1)
m1 = lm(d$DINO_log ~ d$TP_log, data = d)
summary(m1)
m1 = lm(d$DINO_log ~ d$TN_log, data = d)
summary(m1)
plot(m1$residuals ~ d$TN_log)
plot(m1$residuals ~ d$TN_log, col = "red")
plot(m1$residuals ~ d$TN_log, col = "red", abline(lm(m1$residuals ~ d$TN_log)))
plot(d$TN_log, m1$residuals, col = "red", abline(lm(m1$residuals ~ d$TN_log)))
cor(d)
cor(d[,5:8])
plot(d[,5:8])
cor(d[,5:7, 13])
plot(d[,5:8])
cor(d[,5:13])
plot(d[,5:8])
cor(d[,13:8])
plot(d[,5:7. 13])
plot(d[,5:7, 13])
plot(d[,5:8, 13])
plot(d[,5:13])
plot(d[,5:7, 13])
plot(d[,5:7 + 13])
plot(d[,5:7, 13])
plot(d[,5:8])
mfull = lm(d$DINO_log ~ d$TN_log + d$TP_log + d$TEMP_kwad, data = d)
summary(mfull)
BIC(model)
summary(mfull)
m2 = lm(d$DINO_log ~ d$TN_log + d$TP_log, data = d)
summary(m2)
BIC(m2)
m3full = lm(d$DINO_log ~ d$TN_log + d$TEMP_kwad, data = d)
summary(m3full)
BIC(m3full)
m4full = lm(d$DINO_log ~ d$TP_log + d$TEMP_kwad, data = d)
summary(m4full)
BIC(m4full)
m2 = lm(d$DINO_log ~ d$TP_log, data = d)
summary(m2)
BIC(m2)
m3 = lm(d$DINO_log ~ d$TEMP_kwad, data = d)
summary(m3)
BIC(m3)
tabel = feature.table
tabel = subset(tabel, select = -c(V2, V22, V7))
tabel = feature.table
feature.table <- read.delim("~/Downloads/assignment-datapackage-damma/feature-table.txt", header=FALSE, comment.char="#")
View(feature.table)
tabel = feature.table
tabel = subset(tabel, select = -c(V2, V22, V7))
plot.table(tabel)
plot(tabel)
def.off(tabel)
def.off()
def()
library(deBif)
install.packages("deBif")
library(deBif)
install.packages("devtools")
devtools::install_github("amderoos/deBif")
library(tools)
library(deBif)
install.packages("devtools")
devtools::install_github("amderoos/deBif")
install.packages("devtools")
library(deBif)
devtools::install_github("amderoos/deBif")
install.packages("devtools")
phaseplane(model2, state, parms)
library(deBif)
#1
state <- c(P = 0.5, D = 0.5)
parms <- c(r = 0.2, e = 1, a = 0.02, d = 0.25, Th = 1, K = 1)
model <- function(t, state, parms) {
with(as.list(c(state,parms)), {
fP <- (a*P)/(1 + (a * Th * P))
dPdt <- (r*P)*(1-P/K) - fP*D
dDdt <- e*fP*D - d*D
return(list(c(dPdt, dDdt)))
})
}
#2
phaseplane(model, state, parms)
phaseplane(model2, state, parms)
model2 <- function(t, state, parms) {
with(as.list(c(state,parms)), {
fP <- (a*P)/(1 + (a * Th * P))
dD <- d*D + C*((D^2)/(1+Ad*D^2))
dPdt <- (r*P)*(1-P/K) - fP*D
dDdt <- e*fP*D - dD
return(list(c(dPdt, dDdt)))
})
}
phaseplane(model2, state, parms)
bifurcation(model2, state, parms)
parms <- c(r = 2, Ad = 44.444, e = 0.5, a = 9.1463, d = 0.1, Th = 0.667, C = 6.667, K = 1)
#vissen
state <- c(P = 0.5, D = 0.5)
model2 <- function(t, state, parms) {
with(as.list(c(state,parms)), {
fP <- (a*P)/(1 + (a * Th * P))
dD <- d*D + C*((D^2)/(1+Ad*D^2))
dPdt <- (r*P)*(1-P/K) - fP*D
dDdt <- e*fP*D - dD
return(list(c(dPdt, dDdt)))
})
}
phaseplane(model2, state, parms)
list.files("/Users/yanickidsinga/Documents/GitHub/code_scriptie/data/Deepsquak/20220202")
library(R.matlab)
install.packages(R.matlab)
install.packages("R.matlab")
library(R.matlab)
files = list.files("/Users/yanickidsinga/Documents/GitHub/code_scriptie/data/Deepsquak/20220202")
for (i in files){
data = readMat(i)
str(data)
}
library((stringer))
library(stringer)
library(stringr)
files = list.files("/Users/yanickidsinga/Documents/GitHub/code_scriptie/data/Deepsquak/20220202")
for (i in files){
updated_string = gsub(" ", "", i)
data = readMat(updated_string)
str(data)
}
setwd("/Users/yanickidsinga/Documents/GitHub/code_scriptie/data/Deepsquak/20220202")
files = list.files("/Users/yanickidsinga/Documents/GitHub/code_scriptie/data/Deepsquak/20220202")
for (i in files){
updated_string = gsub(" ", "", i)
data = readMat(updated_string)
str(data)
}
setwd("/Users/yanickidsinga/Documents/GitHub/code_scriptie/data/Deepsquak/20220202")
files = list.files("/Users/yanickidsinga/Documents/GitHub/code_scriptie/data/Deepsquak/20220202")
for (i in files){
updated_string = gsub(" ", "", i)
data = readMat(updated_string)
str(data)
}
setwd("/Users/yanickidsinga/Documents/GitHub/code_scriptie/data/Deepsquak/20220202")
files = list.files("/Users/yanickidsinga/Documents/GitHub/code_scriptie/data/Deepsquak/20220202")
for (i in files){
#updated_string = gsub(" ", "", i)
data = readMat(updated_string)
str(data)
}
files = list.files("/Users/yanickidsinga/Documents/GitHub/code_scriptie/data/Deepsquak/20220202")
for (i in files){
#updated_string = gsub(" ", "", i)
data = readMat(updated_string)
str(data)
}
#updated_string = gsub(" ", "", i)
#data = readMat(updated_string)
str(data)
for (i in files){
#updated_string = gsub(" ", "", i)
data = readMat(i)
str(data)
}
BiocManager::install("rhdf5")
install.packages("BiocManager")
BiocManager::install("rhdf5")
str(data)
for (i in files){
#updated_string = gsub(" ", "", i)
data = h5read(i)
str(data)
}
#updated_string = gsub(" ", "", i)
data = h5read(i)
library(rhdf5)
for (i in files){
#updated_string = gsub(" ", "", i)
data = h5read(i)
str(data)
}
for (i in files){
#updated_string = gsub(" ", "", i)
data = h5read(i, "hoi")
str(data)
}
for (i in files){
#updated_string = gsub(" ", "", i)
data = h5read(i, 'Calls')
str(data)
}
#updated_string = gsub(" ", "", i)
data = h5read(i, 'detection_metadata')
for (i in files){
#updated_string = gsub(" ", "", i)
data = h5read(i, 'detection_metadata')
str(data)
}
for (i in files){
#updated_string = gsub(" ", "", i)
data = h5read(i, 'detection_metadata')
data
}
for (i in files){
#updated_string = gsub(" ", "", i)
data = h5read(i, 'Calls')
data
}
str(data)
for (i in files){
#updated_string = gsub(" ", "", i)
data = h5read(i, 'audiodata')
str(data)
}
